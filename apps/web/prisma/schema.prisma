// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(ulid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(ulid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}

enum Role {
  USER
  SUPER_ADMIN
}
 
model User {
  id            String    @id @default(ulid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime? @map("email_verified")
  role          Role      @default(USER)
  image         String?
  location      String?
  bio           String?
  organization  String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  questions     Questions[]
  answers       Answers[]
  savedAnswers  SavedAnswer[]
  upvotesAnswer UpvotesAnswer[]
  comments      Comment[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}


model Category {
  categoryId        String   @id @default(ulid()) @map("category_id")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  questionCategory QuestionCategory[]

  @@map("categories")
}

model Questions {
  questionId String @id @default(ulid()) @map("question_id")
  slug     String @unique
  content String @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  questionCategory QuestionCategory[]
  answer Answers[]


  @@map("questions")
}

model QuestionCategory{
  questionId String @map("question_id")
  categoryId String @map("category_id")

  question Questions @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)

  @@id([questionId, categoryId])
  @@map("question_category")
}

model Answers {
  answerId String @id @default(ulid()) @map("answer_id")
  content String @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  questionId String @map("question_id")
  question Questions @relation(fields: [questionId], references: [questionId], onDelete: Cascade)

  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  savedAnswers SavedAnswer[]
  upvotesAnswer UpvotesAnswer[]
  comments Comment[]

  @@map("answers")
  @@unique([questionId, userId])
}

model SavedAnswer {
  bookmarkId String @id @default(ulid()) @map("bookmark_id")
  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  answerId String @map("answer_id")
  answer Answers @relation(fields: [answerId], references: [answerId], onDelete: Cascade)

  @@unique([userId, answerId])
  @@map("saved_answers")
  
}

model UpvotesAnswer {
  upvoteId String @default(ulid()) @map("upvote_id")
  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  answerId String @map("answer_id")
  answer Answers @relation(fields: [answerId], references: [answerId], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, answerId,upvoteId])
  @@map("upvotes_answer")
}

model Comment {
  commentId String @id @default(ulid()) @map("comment_id")
  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  answerId String @map("answer_id")
  answer Answers @relation(fields: [answerId], references: [answerId], onDelete: Cascade)
  parentId String?  @map("parent_id")
  parentComment Comment? @relation("ParentComment", fields: [parentId], references: [commentId], onDelete: Cascade)
  childComments Comment[] @relation("ParentComment")
  content String @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("comments")
}