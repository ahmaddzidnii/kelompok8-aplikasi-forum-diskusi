generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SUPER_ADMIN
}

model Account {
   id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(ulid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(ulid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime? @map("email_verified")
  role          Role      @default(USER)
  image         String?
  location      String?
  bio           String?
  organization  String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts      Account[]
  sessions      Session[]
  questions     Question[]
  answers       Answer[]
  savedAnswers  SavedAnswer[]
  upvotesAnswer UpvoteAnswer[]
  comments      Comment[]

  @@map("users")
}

model Category {
  categoryId   String   @id @default(ulid()) @map("category_id")
  name         String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  questionCategories QuestionCategory[]

  @@map("categories")
}

model Question {
  questionId   String   @id @default(ulid()) @map("question_id")
  slug         String   @unique
  content      String   @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  userId       String   @map("user_id")

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionCategories QuestionCategory[]
  answers      Answer[]

  @@map("questions")
}

model QuestionCategory {
  questionId   String   @map("question_id")
  categoryId   String   @map("category_id")

  question     Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  category     Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)

  @@id([questionId, categoryId])
  @@map("question_category")
}

model Answer {
  answerId     String   @id @default(ulid()) @map("answer_id")
  content      String   @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  questionId   String   @map("question_id")
  userId       String   @map("user_id")

  question     Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedAnswers SavedAnswer[]
  upvotesAnswer UpvoteAnswer[]
  comments     Comment[]

  @@map("answers")
  @@unique([questionId, userId])
}

model SavedAnswer {
  bookmarkId   String   @id @default(ulid()) @map("bookmark_id")
  userId       String   @map("user_id")
  answerId     String   @map("answer_id")

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer       Answer   @relation(fields: [answerId], references: [answerId], onDelete: Cascade)

  @@unique([userId, answerId])
  @@map("saved_answers")
}

model UpvoteAnswer {
  upvoteId     String   @id @default(ulid()) @map("upvote_id")
  userId       String   @map("user_id")
  answerId     String   @map("answer_id")
  createdAt    DateTime @default(now()) @map("created_at")

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer       Answer   @relation(fields: [answerId], references: [answerId], onDelete: Cascade)

  @@unique([userId, answerId, upvoteId])
  @@map("upvotes_answer")
}

model Comment {
  commentId         String    @id @default(ulid()) @map("comment_id")
  userId            String    @map("user_id")
  answerId          String    @map("answer_id")
  parentCommentId   String?   @map("parent_comment_id")
  replyToCommentId  String?   @map("reply_to_comment_id")
  content           String    @db.Text
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer            Answer    @relation(fields: [answerId], references: [answerId], onDelete: Cascade)
  parentComment     Comment?  @relation("ParentComment", fields: [parentCommentId], references: [commentId], onDelete: Cascade)
  replyToComment    Comment?  @relation("ReplyToComment", fields: [replyToCommentId], references: [commentId], onDelete: Cascade)
  repliedBy         Comment[] @relation("ReplyToComment")
  childComments     Comment[] @relation("ParentComment")

  @@map("comments")
}